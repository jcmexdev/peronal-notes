/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => StroimanTitleRenamerPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var path = __toESM(require("path"));
var StroimanTitleRenamerPlugin = class extends import_obsidian.Plugin {
  // settings: MyPluginSettings;
  constructor(app, manifest) {
    super(app, manifest);
    this.handleRename = this.handleRename.bind(this);
  }
  handleRename(file, oldPath) {
    var _a;
    const newMetadata = this.app.metadataCache.getFileCache(file);
    const oldMetadata = this.app.metadataCache.getCache(oldPath);
    const metadata = newMetadata || oldMetadata;
    const oldName = path.parse(oldPath).name;
    const h1 = (_a = metadata == null ? void 0 : metadata.headings) == null ? void 0 : _a.find((x) => x.level === 1);
    if (h1 && h1.heading === oldName) {
      this.app.vault.process(file, (contents) => {
        const oldHeading = contents.slice(h1.position.start.offset + 1, h1.position.end.offset).trim();
        if (oldHeading !== oldName) {
          console.warn(
            "stroiman-title-renamer - bail due inconsistent data",
            {
              oldHeading,
              oldName
            }
          );
          return contents;
        } else {
          const start = contents.slice(0, h1.position.start.offset);
          const end = contents.slice(h1.position.end.offset);
          const newHeading = "# " + file.basename;
          return start + newHeading + end;
        }
      });
    }
  }
  async onload() {
    this.registerEvent(this.app.vault.on("rename", this.handleRename));
  }
  onunload() {
  }
  // async loadSettings() {
  // 	this.settings = Object.assign(
  // 		{},
  // 		DEFAULT_SETTINGS,
  // 		await this.loadData(),
  // 	);
  // }
  //
  // async saveSettings() {
  // 	await this.saveData(this.settings);
  // }
};

/* nosourcemap */